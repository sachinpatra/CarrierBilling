//
//  ConfigurationReader.m
//  InstaVoice
//
//  Created by EninovUser on 07/08/13.
//  Copyright (c) 2013 EninovUser. All rights reserved.
//

#import "ConfigurationReader.h"
static ConfigurationReader *confgReader = nil;
static NSUserDefaults* appGroupSettings = nil;

@implementation ConfigurationReader

-(id)init
{
    self = [super init];
    if(self)
    {
        settings = [NSUserDefaults standardUserDefaults];
        [self setAppSecureKey:@"b2ff398f8db492c19ef89b548b04889c"];

    }
    return self;
}

+(ConfigurationReader*)sharedConfgReaderObj
{
    if(confgReader == nil)
    {
        confgReader = [[ConfigurationReader alloc] init];
    }
    return confgReader;
}

+(NSUserDefaults*)sharedSettingsForExtension {
    
    if(nil == appGroupSettings)
        appGroupSettings = [[NSUserDefaults alloc] initWithSuiteName:@"group.com.kirusa.InstaVoiceGroup"];
    
    return appGroupSettings;
}

/*
This function set the IVUserId of current logged in user.
generated by the server.
*/
-(void)setIVUserId:(long)ivuserid
{
    [settings setInteger:ivuserid forKey:CONFG_IV_USER_ID];
    [settings synchronize];
}


/*
 This finction gives the IVUserId of current logged in user.
 */
-(long)getIVUserId
{
    return [settings integerForKey:CONFG_IV_USER_ID];
}
/*
 This gives the information about login type of current logged in user.Is this Email or Phone.
 */
-(NSString*)getLoginType
{
    return [settings valueForKey:CONFG_LOGIN_TYPE];
}

/*
 This set the information about login type of current logged in user.Is this Email or Phone.
 */
-(void)setLoginType:(NSString*)loginType
{
    [settings setValue:loginType forKey:CONFG_LOGIN_TYPE];
    [settings synchronize];
}


//This function set the Login ID of current logged in User.
-(void)setLoginId:(NSString*)paramString
{
    [settings setValue:paramString forKey:CONFG_LOGIN_ID];
    [settings synchronize];
}

/*
 This function gives the login ID of current logged in user.
 */
-(NSString*)getLoginId
{
    return [settings valueForKey:CONFG_LOGIN_ID];
}

-(void)setPnsAppID:(NSString*)psnAppID
{
    [settings setValue:psnAppID forKey:CONFG_PNS_APP_ID];
    [settings synchronize];
}

-(NSString*)getPnsAppID
{
    return [settings valueForKey:CONFG_PNS_APP_ID];
}

-(void)setScreenName:(NSString*)screenName
{
    [settings setValue:screenName forKey:CONFG_SCREEN_NAME];
    [settings synchronize];
}

-(NSString*)getScreenName
{
    return [settings valueForKey:CONFG_SCREEN_NAME];
}

/*
 This function gives the user secure key.
 generated by the server after successfull registration.
 */
-(NSString*)getUserSecureKey
{
    return [settings valueForKey:CONFG_USER_SECURE_KEY];
}

/*This function set the user secure key.
generated by the server after successfull registration.*/
-(void)setUserSecureKey:(NSString*)paramString
{
    [settings setValue:paramString forKey:CONFG_USER_SECURE_KEY];
    [settings synchronize];
}

/*
 This function set the Registration secure key after registration.
 generated by the server after successfull registration
 */
-(void) setRegSecureKey:(NSString*)paramString
{
    [settings setValue:paramString forKey:CONFG_REG_SECURE_KEY];
    [settings synchronize];
}

/*
 This function return Registration secure key.
 */
-(NSString*)getRegSecureKey
{
    return [settings valueForKey:CONFG_REG_SECURE_KEY];
}

/*
 This function return the boolean flag that indicates,contacts are sync or not with server.
 */
-(BOOL) getContactServerSyncFlag
{
    return [settings boolForKey:CONFG_CONTACT_SERVER_SYNC_FLAG];
}

/*
 This function set the server contacts sync flag.
 */
-(void)setContactServerSyncFlag:(BOOL) paramBool
{
    [settings setBool:paramBool forKey:CONFG_CONTACT_SERVER_SYNC_FLAG];
    [settings synchronize];
}

/*
 This function return the boolean flag that indicates,contacts are sync or not with native addesss book.
 */

-(BOOL) getContactLocalSyncFlag
{
    return [settings boolForKey:CONFG_CONTACT_LOCAL_SYNC_FLAG];
}

/*
 This function set the local contacts  sync  flag.
 */
-(void)setContactLocalSyncFlag:(BOOL) paramBool
{
    [settings setBool:paramBool forKey:CONFG_CONTACT_LOCAL_SYNC_FLAG];
    [settings synchronize];
}

/*
 This function return a boolean flag that indicates the contacts sync permission dialog is appear or not
 */
-(BOOL) getContactSyncPermissionFlag
{
    return [settings boolForKey:CONFG_CONTACT_SYNC_PERMISSION_FLAG];
}

/*
 This function set the contact Sync permission flag.
 */
-(void) setContactSyncPermissionFlag:(BOOL)paramBool
{
    [settings setBool:paramBool forKey:CONFG_CONTACT_SYNC_PERMISSION_FLAG];
    [settings synchronize];
}

/*
 This function return the App secure key.
 */
-(NSString*)getAppSecureKey
{
    return [settings valueForKey:CONFG_APP_SECURE_KEY];
}

/*
 This function set App secure Key.Given in the Server API Doc.
 */
-(void)setAppSecureKey:(NSString*) paramString
{
    [settings setValue:paramString forKey:CONFG_APP_SECURE_KEY];
    [settings synchronize];
}

/*
 This function set the Country ISD of SIM.
 */
-(void)setCountryISD:(NSString*)paramString
{
    [settings setValue:paramString forKey:CONFG_COUNTRY_ISD];
    [settings synchronize];
}

/*
 This function return the Country ISD of SIM.
 */
-(NSString*)getCountryISD
{
    return [settings valueForKey:CONFG_COUNTRY_ISD];
}

/*
 This function set the Country Code of SIM.
 */
-(void)setCountryCode:(NSString*)paramString
{
    [settings setValue:paramString forKey:CONFG_COUNTRY_CODE];
    [settings synchronize];
}

/*
 This function return the Country Code of SIM.
 */
-(NSString*)getCountryCode
{
    return [settings valueForKey:CONFG_COUNTRY_CODE];
}

/*
 This function set the Country Name of SIM.
 */
-(void)setCountryName:(NSString*)countryName
{
    [settings setValue:countryName forKey:CONFG_COUNTRY_NAME];
    [settings synchronize];
}

/*
 This function return the Country Name of SIM.
 */
-(NSString*) getCountryName
{
   return  [settings valueForKey:CONFG_COUNTRY_NAME];
}



/*
 This function returns the Last Trasactin Number.
 Last TrNo is used i fetch contacts.
 */
-(NSNumber*) getLast_trno
{
    
    return [settings valueForKey:CONFG_LAST_TRNO];
}
/*
 This function set the Last Trasactin Number.
 Last TrNo is used i fetch contacts.
 */
-(void)setLast_trno:(NSNumber*)last_trno
{
    [settings setValue:last_trno forKey:CONFG_LAST_TRNO];
    [settings synchronize];
}

/*
 This function return a docs Url which is used in about us */
-(NSString*) getDocsUrl
{
    return [settings valueForKey:CONFG_DOCS_URL];
}
/*
 This function set a docs Url which is used in about us */
-(void) setDocsUrl:(NSString*) docs_url
{
    [settings setValue:docs_url forKey:CONFG_DOCS_URL];
    [settings synchronize];
}

/*
 This function return user's current location*/
-(NSString*) getLocation_name
{
    return [settings valueForKey:CONFG_LOCATION_NAME];
}
/*
 This function set user's current location*/
-(void) setLocation_name:(NSString*) location_name
{
    [settings setValue:location_name forKey:CONFG_LOCATION_NAME];
    [settings synchronize];
}

/*The following functions are for ui changes*/
/*for saving gender in validation screen according to new ui*/

-(void) setUserGender:(NSString*) gender
{
    [settings setValue:gender forKey:CONFG_GENDER];
    [settings synchronize];
}

-(NSString*) getUserGender
{
    return [settings valueForKey:CONFG_GENDER];
}
/*for saving date of birth in validation screen according to new ui desighn*/

-(void) setUserDob:(NSNumber *) dob
{
    [settings setValue:dob forKey:CONFG_DOB];
    [settings synchronize];
}

-(NSNumber *) getUserDob
{
    return [settings valueForKey:CONFG_DOB];
}


-(void) setTotalContact:(NSNumber *) totalContact
{
    [settings setValue:totalContact forKey:CONFG_TOTAL_CONTACT];
    [settings synchronize];
}

-(NSNumber *) getTotalContact
{
    return [settings valueForKey:CONFG_TOTAL_CONTACT];
}

//JAN 28
-(void) setTotalContactValues:(NSNumber *) totalContact
{
    [settings setValue:totalContact forKey:CONFG_TOTAL_CONTACT_VALUES];
    [settings synchronize];
}

-(NSNumber *) getTotalContactValues
{
    return [settings valueForKey:CONFG_TOTAL_CONTACT_VALUES];
}
//

-(void) setTotalIVContact:(NSNumber *) totalIVContact
{
    [settings setValue:totalIVContact forKey:CONFG_TOTAL_IV_CONTACT];
    [settings synchronize];
}

-(NSNumber *) getTotalIVContact
{
    return [settings valueForKey:CONFG_TOTAL_IV_CONTACT];
}



-(void) setValidationTimer:(NSNumber *) timeToSet
{
    [settings setValue:timeToSet forKey:CONFG_VALIDATION_TIME];
    [settings synchronize];
}

-(NSNumber *) getValidationTimer
{
    return [settings valueForKey:CONFG_VALIDATION_TIME];
}

-(void) setUserNumberForValidation:(NSString*) number
{
    [settings setValue:number forKey:CONFG_VALIDATION_NUMBER];
    [settings synchronize];
}

-(NSString*) getUserNumberForValidation
{
    return [settings valueForKey:CONFG_VALIDATION_NUMBER];
}




/*
 This function set the User's profile pic path after downloading from  the server*/
-(void) setUserProfilePicPath:(NSString*) path
{
    [settings setValue:path forKey:CONFG_PIC_PATH];
    [settings synchronize];
}

/*
 This function return the User's profile pic path after downloading from  the server*/
-(NSString*) getUserProfilePicPath
{
    return [settings valueForKey:CONFG_PIC_PATH];
}

/*
 this function return phone number length of current country which user belong*/
-(int) getMaxPhoneLen
{
    return [settings integerForKey:CONFG_MAX_PHONE_LEN];
}

/*
 this function return phone number length of current country which user belong*/
-(void) setMaxPhoneLen:(int)phonelen
{
    [settings setInteger:phonelen forKey:CONFG_MAX_PHONE_LEN];
    [settings synchronize];
}

/*
 this function return phone number length of current country which user belong*/
-(int) getMinPhoneLen
{
    return [settings integerForKey:CONFG_MIN_PHONE_LEN];
}

/*
 this function return phone number length of current country which user belong*/
-(void) setMinPhoneLen:(int)phonelen
{
    [settings setInteger:phonelen forKey:CONFG_MIN_PHONE_LEN];
    [settings synchronize];
}



-(void)setFBConnectUrl:(NSString*)url
{
    [settings setValue:url forKey:CONFG_FB_CONNECT_URL];
    [settings synchronize];
}

-(NSString *)getFBConnectUrl
{
    return [settings valueForKey:CONFG_FB_CONNECT_URL];
}

-(void)setTWConnectUrl:(NSString*)url
{
    [settings setValue:url forKey:CONFG_TW_CONNECT_URL];
    [settings synchronize];
}

-(NSString *)getTWConnectUrl
{
    return [settings valueForKey:CONFG_TW_CONNECT_URL];
}

/**
 *This function set the logged in value of current user.
 */
-(void)setIsLoggedIn:(BOOL)value
{
    
    [settings setBool:value forKey:CONFG_IS_LOGGED_IN];
    [settings synchronize];
}

/**
 * This function return the value of current logged in user
 */
-(BOOL)getIsLoggedIn
{
    return [settings boolForKey:CONFG_IS_LOGGED_IN];
}

-(void)setCountryMCCMNC:(NSString *)mccmnc
{
    [settings setValue:mccmnc forKey:CONFG_COUNTRY_MCC_MNC];
    [settings synchronize];
}

-(NSString*)getCountryMCCMNC
{
    return [settings valueForKey:CONFG_COUNTRY_MCC_MNC];
}

-(NSString*)getCarrierName
{
    return [settings valueForKey:@"country_sim_carrier"];
}


-(BOOL) getContactAccessPermissionFlag
{
      return [settings boolForKey:CONTACT_ACCESS_PERMISSION_FLAG];
}

-(void)setContactAccessPermissionFlag:(BOOL)permissionFlag
{
    [settings setBool:permissionFlag forKey:CONTACT_ACCESS_PERMISSION_FLAG];
    [settings synchronize];

}



-(void)setAfterMsgId:(long)value
{
    [settings setInteger:value forKey:CONFG_AFTER_MSG_ID];
}

-(long)getAfterMsgId
{
    return [settings integerForKey:CONFG_AFTER_MSG_ID];
}

-(void) setLastBlogId:(long) value
{
    [settings setInteger:value forKey:CONFG_LAST_BLOG_ID];
}

-(long) getLastBlogId
{
    return [settings integerForKey:CONFG_LAST_BLOG_ID];
}


-(NSString*)getCloudSecureKey
{
    return [settings valueForKey:CONFG_CLOUD_SECURE_KEY];
}

-(void)setCloudSecureKey:(NSString*)key
{
    [settings setValue:key forKey:CONFG_CLOUD_SECURE_KEY];
    [settings synchronize];
}

-(NSString*)getVoipPushToken
{
    return [settings valueForKey:CONFG_VOIP_PUSH_TOKEN];
}

-(void)setVoipPushToken:(NSString*)token
{
    [settings setValue:token forKey:CONFG_VOIP_PUSH_TOKEN];
    [settings synchronize];
}


-(void)setPassword:(NSString*)pwd withTime: (NSDate*)time
{
    [settings setValue:pwd forKey:CONFG_LOGIN_PWD];
    
#ifdef REACHME_APP
    [settings setValue:time forKey:CONFG_LOGIN_PWD_SET_TIME];
#endif
    
    [settings synchronize];
}

#ifdef REACHME_APP
-(NSDate *)getPasswordChangeTime {
    return [settings valueForKey:CONFG_LOGIN_PWD_SET_TIME];
}
- (void)setNotificationSound:(NSDictionary<NSString*, NSString*> *)info {
    [settings setValue:info forKey:CONFG_NOTIFICATION_SOUND_PATH];
    [settings synchronize];
}

- (NSDictionary<NSString*, NSString*> *)getNotificationSoundInfo {
    return [settings valueForKey:CONFG_NOTIFICATION_SOUND_PATH];
}

- (void)setRingtone:(BOOL)set {
    [settings setBool:set forKey:CONFG_RINGTONE_SET];
    [settings synchronize];
}

- (BOOL)isRingtoneSet {
    return [settings boolForKey:CONFG_RINGTONE_SET];
}
#endif

-(NSString *)getPassword
{
     return [settings valueForKey:CONFG_LOGIN_PWD];
}

-(BOOL)isFBConnected
{
    return [settings boolForKey:CONFG_FB_CONNECTED];
}
-(BOOL)isTWConnected
{
    return [settings boolForKey:CONFG_TW_CONNECTED];
}

-(void)setIsFBConnected:(BOOL)value
{
    [settings setBool:value forKey:CONFG_FB_CONNECTED];
    [settings synchronize];
}

-(void)setIsTWConnected:(BOOL)value
{
    [settings setBool:value forKey:CONFG_TW_CONNECTED];
    [settings synchronize];
}

-(NSString*)getDeviceUUID
{
    return [settings valueForKey:CONFG_DEVICE_UUID];
}
-(void)setDeviceUUID:(NSString*)str
{
    [settings setValue:str forKey:CONFG_DEVICE_UUID];
    [settings synchronize];
}

-(BOOL)isSignUp
{
    return [settings boolForKey:IS_SIGNUP];
}

-(void)setISSignUp:(BOOL)value
{
    [settings setBool:value forKey:IS_SIGNUP];
    [settings synchronize];
}
-(long)getAfterMsgActivityId
{
    return [settings integerForKey:CONFG_AFTER_ACTIVITY_ID];
}
-(void)setAfterMsgActivityId:(long)value
{
    [settings setInteger:value forKey:CONFG_AFTER_ACTIVITY_ID];
    [settings synchronize];
}

-(void)setSIMIsdCode:(NSString*)value
{
    [settings setValue:value forKey:CONFG_SIM_ISD_CODE];
    [settings synchronize];
}

-(NSString*)getSIMIsdCode
{
    return [settings valueForKey:CONFG_SIM_ISD_CODE];
}

//TODO not used
/* REMOVE
-(void)setDeviceInfoSync:(BOOL)value
{
    [settings setBool:value forKey:CONFG_SET_DEVICE_INFO];
    [settings synchronize];
}

-(BOOL)getDeviceInfoSync
{
    return [settings boolForKey:CONFG_SET_DEVICE_INFO];
}
*/

-(void)setContactPermissionAlertFlag:(BOOL)value
{
    [settings setBool:value forKey:CONFG_CONTACT_PERMISSION_ALERT_FLAG];
    [settings synchronize];
}

-(void)setShowContactUploadDlg:(BOOL)value
{
    [settings setBool:value forKey:SHOW_CONTACT_UPLOAD_DLG];
    [settings synchronize];
}

-(BOOL)getShowContactUploadDlg
{
    return [settings boolForKey:SHOW_CONTACT_UPLOAD_DLG];
}

-(BOOL)getContactPermissionAlertFlag
{
    return [settings boolForKey:CONFG_CONTACT_PERMISSION_ALERT_FLAG];
}

-(int)getVolumeMode
{
    return (int)[settings integerForKey:CONFG_VOLUME_MODE];
}

-(void)setVolumeMode:(int)mode
{
    [settings setInteger:mode forKey:CONFG_VOLUME_MODE];
    [settings synchronize];
}

-(int)getVsmsLimit
{
    return (int)[settings integerForKey:CONFG_VSMS_LIMIT];
}

-(void)setVsmsLimit:(int)limt
{
    [settings setInteger:limt forKey:CONFG_VSMS_LIMIT];
    [settings synchronize];
}

-(void)setUserLocationAccess:(BOOL)locationFlag
{
    [settings setBool:locationFlag forKey:CONFG_LOCATION_FALG];
    [settings synchronize];
}

-(BOOL)getUserLocationAccess
{
    return [settings boolForKey:CONFG_LOCATION_FALG];
}

//Voip Status for individual Number
-(void)setReachMeVoipStatus:(BOOL)reachMeStatus forNumber:(NSString *)forNumber
{
    [settings setBool:reachMeStatus forKey:forNumber];
    [settings synchronize];
}

-(BOOL)reachMeVoipStatus:(NSString *)forNumber
{
    return [settings boolForKey:forNumber];
}

//After Verification of OTP
-(void)setOTPVerified:(BOOL)verifiedOTP
{
    [settings setBool:verifiedOTP forKey:CONFG_OTP_FALG];
    [settings synchronize];
}

-(BOOL)getVerifiedOTP
{
    return [settings boolForKey:CONFG_OTP_FALG];
}

-(void)setOTPVerifiedNumber:(NSString *)phoneNumber
{
    [settings setValue:phoneNumber forKey:CONFG_OTP_VERIFIED_NUMBER];
    [settings synchronize];
}

-(NSString *)getVerifiedOTPNumber
{
    return [settings valueForKey:CONFG_OTP_VERIFIED_NUMBER];
}

- (void)removeValueForKey:(NSString *)key {
    [settings removeObjectForKey:key];
    [settings synchronize ];
}

-(NSNumber*)getFBLastFetchTime
{
    return (NSNumber*)[settings valueForKey:CONFG_FB_LAST_FETCH_TIME];
}
-(void)setFBLastFetchTime:(NSNumber*)fbTime
{
    [settings setValue:fbTime forKey:CONFG_FB_LAST_FETCH_TIME];
    [settings synchronize];
}

-(NSNumber*)getABLastSyncTime
{
    return (NSNumber*)[settings valueForKey:CONFG_AB_LAST_SYNC_TIME];
}
-(void)setABLastSyncTime:(NSNumber*)abTime
{
    [settings setValue:abTime forKey:CONFG_AB_LAST_SYNC_TIME];
    [settings synchronize];
}

-(NSNumber*)getLastMsgUpdateFromContactTime
{
    return (NSNumber*)[settings valueForKey:LAST_MSG_UPDATE_FROM_CONTACT_TIME];
}
-(void)setLastMsgUpdateFromContactTime:(NSNumber*)msgUpdateTime
{
    [settings setValue:msgUpdateTime forKey:LAST_MSG_UPDATE_FROM_CONTACT_TIME];
    [settings synchronize];
}

-(NSString*)getClientAppBuildNumber
{
    return [settings valueForKey:CLIENT_APP_BUILD_NUMBER];
}
-(void)setClientAppBuildNumber:(NSString*)buildNo
{
    [settings setValue:buildNo forKey:CLIENT_APP_BUILD_NUMBER];
    [settings synchronize];
}

/**
 * This function is used set the default network
 */
-(void)setDefaultNetworkData:(NSDictionary *)network{
    [settings setObject:network forKey:DEFAULT_NETWORK_DATA];
    [settings synchronize];
}

/**
 * This function is used get the default network
 */
-(NSDictionary *)getDefaultNetworkData{
    return [settings objectForKey:DEFAULT_NETWORK_DATA];
}


//CMP
/* 
 network = array of NSDictionary
*/
-(void)setNetworkData:(NSArray *)network{
    [settings setObject:network forKey:NETWORK_DATA_LIST];
    [settings synchronize];
}

/**
 * This function is used get the default network
 */
-(NSArray *)getNetworkData{
    return [settings objectForKey:NETWORK_DATA_LIST];
}

//

/*
 This function return the boolean flag that indicates whether the log is enabled for debugging.
 */
-(BOOL) getEnableLogFlag
{
    return [settings boolForKey:ENABLE_LOG_FLAG];
}

/*
 This function set when the log is enabled for debugging.
 */
-(void)setEnableLogFlag:(BOOL) paramBool
{
    [settings setBool:paramBool forKey:ENABLE_LOG_FLAG];
    [settings synchronize];
}

/**
 * This function is get the info about branding screen to be shown or not.
 */
-(BOOL)getShowBrandingScreen{
    return [settings boolForKey:CONFG_SHOW_BRANDING_SCREEN];
}

/**
 * This function is set the info about branding screen to be shown or not next time
 */
-(void)setShowBrandingScreen:(BOOL)value{
    [settings setBool:value forKey:CONFG_SHOW_BRANDING_SCREEN];
    [settings synchronize];
}

-(NSNumber*)getGroupUpdateLastTransNo
{
    return [settings valueForKey:CONFG_GROUP_UPDATE_LAST_TRANS_NO];
}
-(void)setGroupUpdateLastTransNo:(NSNumber*)transNo
{
    [settings setValue:transNo forKey:CONFG_GROUP_UPDATE_LAST_TRANS_NO];
    [settings synchronize];
}

-(BOOL)getClearAddressBookFlag
{
    return [settings boolForKey:CONFG_CLEAR_ADDRESS_BOOK];
}
-(void)setClearAddressBookFlag:(BOOL)flag
{
    [settings setBool:flag forKey:CONFG_CLEAR_ADDRESS_BOOK];
    [settings synchronize];
}

-(BOOL)getABChangeSynced {
    return [settings boolForKey:CONFIG_AB_CHANGE_SYNC];
}

-(void)setABChangeSynced:(BOOL)flag {
    [settings setBool:flag forKey:CONFIG_AB_CHANGE_SYNC];
    [settings synchronize];
}

-(NSDate*)getLastPurgeDate
{
    return [settings valueForKey:CONFG_LAST_PURGE_DATE];
}
-(void)setLastPurgeDate:(NSDate*)date
{
    [settings setValue:date forKey:CONFG_LAST_PURGE_DATE];
    [settings synchronize];
}

-(void)setObject:(id)obj forTheKey:(NSString*)key
{
    [settings setObject:obj forKey:key];
    [settings synchronize];
}

-(id)getObjectForTheKey:(NSString*)key
{
    return [settings objectForKey:key];
}

-(void)removeObjectForTheKey:(NSString*)key
{
    [settings removeObjectForKey:key];
    [settings synchronize];
}


-(NSString*) getPossibleNumber
{
    return [settings valueForKey:CONFG_POSSIBLE_NUMBER_FAILED];
}
/*
 This function set user's current location*/
-(void) setPossibleNumber:(NSString*) status
{
    [settings setValue:status forKey:CONFG_POSSIBLE_NUMBER_FAILED];
    [settings synchronize];
}
-(NSString*) getMobileNumber
{
    return [settings valueForKey:CONFG_LAST_LOGIN_MOBILE_NUMBER];
}
/*
 This function set user's current location*/
-(void) setMobileNumber:(NSString*) status
{
    [settings setValue:status forKey:CONFG_LAST_LOGIN_MOBILE_NUMBER];
    [settings synchronize];
}
-(NSString*) getFormattedUserName
{
    return [settings valueForKey:CONFG_FORMATTED_NUMBER];
}
/*
 This function set user's current location*/
-(void) setFormattedUserName:(NSString *)UserName
{
    [settings setValue:UserName forKey:CONFG_FORMATTED_NUMBER];
    [settings synchronize];
}

- (void)setCurrentLoggedInPhoneNumber:(NSString *)withPhoneNumber {
    
    [settings setObject:withPhoneNumber forKey:LOGGEDINPHONENUMBER];
    [settings synchronize];
}
- (NSString *)getCurrentLoggedInPhoneNumber {
    return [settings valueForKey:LOGGEDINPHONENUMBER];
}

//TODO not used
/* REMOVE
- (void)setCloudKeySyncToServerStatus:(BOOL)withSyncStatus {
    
    [settings setBool:withSyncStatus forKey:CLOUDKEY_SYNC_TO_SERVER_STATUS];
    [settings synchronize];
}
- (BOOL)getCloudKeySyncToServerStatus {
    
    return [settings boolForKey:CLOUDKEY_SYNC_TO_SERVER_STATUS];
}
*/

-(int)getRingExpiryTime
{
    return (int)[settings integerForKey:CONFG_RING_EXPIRY_MIN];
}

-(void)setRingExpiryTime:(int)time
{
    [settings setInteger:time forKey:CONFG_RING_EXPIRY_MIN];
    [settings synchronize];
}


-(void)setFetchGroupInfoFromServer:(BOOL)flag
{
    [settings setBool:flag forKey:CONFG_FETCH_GROUP_INFO];
    [settings synchronize];
}

-(BOOL)getFetchGroupInfoFromServer
{
    return [settings boolForKey:CONFG_FETCH_GROUP_INFO];
}


- (void)setIsFreshSignUpStatus:(BOOL)isFreshSignUp {
    [settings setBool:isFreshSignUp forKey:IS_FRESH_SIGNUP];
    [settings synchronize];

}
- (BOOL)isFreshSignUp {
    return [settings boolForKey:IS_FRESH_SIGNUP];
}

- (void)setHasLaunchedOnceStatus:(BOOL)hasLaunchedOnceStatus {
    [settings setBool:hasLaunchedOnceStatus forKey:HAS_LAUNCHED_ONCE];
    [settings synchronize];

}
- (BOOL)getHasLaunchedOnceStatus {
    return [settings boolForKey:HAS_LAUNCHED_ONCE];

}

- (NSString *)getLatestCarrierThemeColor {
    return [settings valueForKey:LATEST_CARRIER_THEMECOLOR];
}
- (void)setLatestCarrierThemeColor:(NSString *)currentThemeColor {
    
    [settings setObject:currentThemeColor forKey:LATEST_CARRIER_THEMECOLOR];
    [settings synchronize];

}

- (BOOL)didInAppPromoImageShown {
    return [settings boolForKey:INAPP_PROMOIMAGE_SHOWN];
}

- (void)setInAppPromoImageShownStatus:(BOOL)inAppPromoImageShownStatus {
    [settings setBool:inAppPromoImageShownStatus forKey:INAPP_PROMOIMAGE_SHOWN];
    [settings synchronize];
}


-(BOOL)getVoicemailSupportedFlag {
    return [settings boolForKey:IS_VOICEMAIL_SUPPORTED];
}

-(void)setVoicemailSupportedFlag:(BOOL)isSupported {
    [settings setBool:isSupported forKey:IS_VOICEMAIL_SUPPORTED];
    [settings synchronize];
}

-(void)setVoipSettingFetched:(BOOL)isFetched {
    [settings setBool:isFetched forKey:kVoipSettinFetched];
    [settings synchronize];
}

-(BOOL)getVoipSettingFetched {
    return [settings boolForKey:kVoipSettinFetched];
}

#ifdef REACHME_APP

- (void)setIsRMFreshSignUpStatus:(BOOL)isFreshSignUp {
    [settings setBool:isFreshSignUp forKey:IS_RM_FRESH_SIGNUP];
    [settings synchronize];
    
}
- (BOOL)isRMFreshSignUp {
    return [settings boolForKey:IS_RM_FRESH_SIGNUP];
}

-(void)setHelpChatIvId:(NSInteger)ivid {
    [settings setInteger:ivid forKey:kHelpChatIvId];
    [settings synchronize];
}

-(NSInteger)getHelpChatIvId {
    return [settings integerForKey:kHelpChatIvId];
}

-(void)setSuggestionChatIvId:(NSInteger)ivid {
    [settings setInteger:ivid forKey:kSuggestionChatIvId];
    [settings synchronize];
}

-(NSInteger)getSuggestionChatIvId {
    return [settings integerForKey:kSuggestionChatIvId];
}

-(BOOL)getOnBoardingStatus {
    return [settings boolForKey:IS_ON_BOARDING];
}

-(void)setOnBoardingStatus:(BOOL)onBoardingStatus {
    [settings setBool:onBoardingStatus forKey:IS_ON_BOARDING];
    [settings synchronize];
}

- (void)setClassName:(NSString *)className
{
    [settings setObject:className forKey:CONFG_CLASS_NAME];
    [settings synchronize];
}

- (NSString *)getClassName
{
    return [settings valueForKey:CONFG_CLASS_NAME];
}

- (void)setActiveForNumber:(NSString *)phoneNumber reachMeType:(NSString *)rmType
{
    [settings setObject:rmType forKey:phoneNumber];
    [settings synchronize];
}

- (NSString *)getActiveStringForNumber:(NSString *)phoneNumber
{
    return [settings valueForKey:phoneNumber];
}

- (void)setUsageSummaryForNumber:(NSString *)phoneNumber usageSummary:(NSDictionary *)summary
{
    [settings setObject:summary forKey:phoneNumber];
    [settings synchronize];
}

- (NSDictionary *)getUsageSummaryForNumber:(NSString *)phoneNumber
{
    return [settings valueForKey:phoneNumber];
}

-(NSString*)getMissedCallReasonForTheNumber:(NSString *)phoneNumber {
    NSDictionary* dic = [self getObjectForTheKey:MISSED_CALL_REASON];
    //NSString* reason = [dic valueForKey:phoneNumber];
    return [dic valueForKey:phoneNumber];
}

-(void)setCallLogFileSuffix:(int)number {
    [settings setInteger:number forKey:CONFG_CALL_LOGFILE_SUFFIX];
    [settings synchronize];
}

-(int)getCallLogFileSuffix {
    return (int)[settings integerForKey:CONFG_CALL_LOGFILE_SUFFIX];
}

//For No Internet connection carrier info status update
-(BOOL)getCarrierInfoUpdateStatus {
    return [settings boolForKey:IS_CARRIER_INFO_UPDATE];
}

-(void)setCarrierInfoUpdateStatus:(BOOL)carrierInfoStatus {
    [settings setBool:carrierInfoStatus forKey:IS_CARRIER_INFO_UPDATE];
    [settings synchronize];
}

//Update Misscall reason for particular number
- (void)setMissedCallReasonForNumber:(NSString *)phoneNumber shouldUpdate:(BOOL )update
{
    [settings setBool:update forKey:phoneNumber];
    [settings synchronize];
}

- (BOOL )getMissedCallReasonForNumber:(NSString *)phoneNumber
{
    return [settings boolForKey:phoneNumber];
}

#endif

@end
