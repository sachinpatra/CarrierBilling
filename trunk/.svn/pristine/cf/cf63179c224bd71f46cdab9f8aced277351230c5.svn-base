//
//  ReachMeCreditsViewController.swift
//  ReachMe
//
//  Created by Sachin Kumar Patra on 2/6/18.
//  Copyright Â© 2018 Kirusa. All rights reserved.
//

import UIKit
import StoreKit

class ReachMeCreditsViewController: UITableViewController {
    
    var header : StretchHeader!
    @IBOutlet weak var availabelCreditLabel: UILabel!
    @IBOutlet var headerView: UIStackView!
    var purchaseHistory = [[String:Any]]()
    @IBOutlet weak var refreshSpinner: UIActivityIndicatorView!
    
    //MARK: - View lifecycle
    override func awakeFromNib() {
        super.awakeFromNib()
        setupInAppPurchase()
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setupHeaderView()
        
        fetchPurchasedHistory()
        
        //Allows to purchase prduct from appstore promotion if app already installed
        if #available(iOS 11.0, *) {
            //Test this by puting below URL in iPhone Safari
            //itms-services://?action=purchaseIntent&bundleId=com.kirusa.ReachMe&productIdentifier=com.kirusa.ReachMe.ReachMe_Default_Credits
            //NOTE:- This will help to open the app from safari. If app in killed state, it will open the app and user has to navigate that purchase page immediately otherwise this purchase action won't execute
            SwiftyStoreKit.shouldAddStorePaymentHandler = { payment, product in
                self.purchaseCredit()
                return false
            }
        }
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.setNavigationBarHidden(false, animated: true)
    }
    
    func setupHeaderView() {
        header = StretchHeader()
        header.stretchHeaderSize(headerSize: CGSize(width: view.frame.size.width, height: 220),
                                 imageSize: CGSize(width: view.frame.size.width, height: 220))
        header.imageView.image = #imageLiteral(resourceName: "Image_credits")
        
        header.addSubview(headerView)
        headerView.translatesAutoresizingMaskIntoConstraints = false
        let verticalSpace = NSLayoutConstraint(item: headerView, attribute: .top, relatedBy: .equal, toItem: headerView.superview, attribute: .top, multiplier: 1, constant: 10)
        let buttomSpace = NSLayoutConstraint(item: headerView, attribute: .bottom, relatedBy: .equal, toItem: headerView.superview, attribute: .bottom, multiplier: 1, constant: -10)
        let xConstraint = NSLayoutConstraint(item: headerView, attribute: .centerX, relatedBy: .equal, toItem: headerView.superview, attribute: .centerX, multiplier: 1, constant: 0)
        NSLayoutConstraint.activate([verticalSpace, buttomSpace, xConstraint])
        tableView.tableHeaderView = header
        
        availabelCreditLabel.text = "\(Constants.appDelegate.confgReader.getVsmsLimit())"
    }
    
    
    //MARK: - Button Actions
    @IBAction func onInfoButtonClicked(_ sender: UIBarButtonItem) {
        let alert = UIAlertController(style: .alert, title: "Do more with ReachMe Credits",
                                      message:"""
                                                \u{2022} Read your Voicemails by converting them in the text.
                                                \u{2022} Send local / international voice messages, SMS and photos to anyone, even if they are not using ReachMe.
                                              """.localized)
        alert.addAction(title: "Learn more".localized, style: .default) { (alertAction) in
            guard let url = URL(string: "https://instavoice.com/faqs/") else { return }// Be safe
            if #available(iOS 10.0, *) {
                UIApplication.shared.open(url, options: [:], completionHandler: nil)
            } else {
                UIApplication.shared.openURL(url)
            }
        }
        alert.addAction(title: "OK".localized, style: .default)
        alert.show()
    }
    
    @IBAction func onBuyCreditClicked(_ sender: UIButton) {
        purchaseCredit()
    }
    
    //MARK: - Custom Methods
    func purchaseCredit() {
        guard Common.isNetworkAvailable() == NETWORK_AVAILABLE else {
            ReachMeUtility.showAlert(withMessage: "NET_NOT_AVAILABLE".localized)
            return
        }
        
        //Fetch Productlist From server
        ANLoader.showLoading("", disableUI: true)
        let reqDisc: NSMutableDictionary = ["country_code":  "\(Constants.appDelegate.confgReader.getCountryCode()!)"]
        let availableProdcutAPI = InAppPurchaseApi(request: reqDisc)
        NetworkCommon.addData(reqDisc, eventType: FETCH_PURCHASE_PRODUCTS)
        availableProdcutAPI?.callNetworkRequest(toFetchProductList: reqDisc, withSuccess: {[weak self] (requestAPI, responseDisc) in
            
            if let productList = responseDisc!["product_list"] as? [[String:Any]], let ivProduct = productList.last { //Last product always use for ReachMeCredits
                
                //Call Appstore to purchase product
                SwiftyStoreKit.purchaseProduct(Constants.BUNDLE_ID! + "." + "\(String(describing: ivProduct["product_name"]!))", atomically: false, applicationUsername: "\(Constants.appDelegate.confgReader.getLoginId()!)") { result in
                    
                    if case .success(let purchase) = result {
                        
                        SwiftyStoreKit.fetchReceipt(forceRefresh: false, completion: { receiptResult in
                            switch receiptResult {
                            case .success(let receiptdata):
                                let responseDisc: NSMutableDictionary = ["purchaseToken": receiptdata.base64EncodedString(options: []),
                                                                         "ios_trans_id": purchase.transaction.transactionIdentifier!]
                                if let receiptJSONData = try? JSONSerialization.data(withJSONObject: responseDisc, options: .prettyPrinted) {
                                    let receiptJSONType = try? JSONSerialization.jsonObject(with: receiptJSONData, options: [])

                                    //Update local server
                                    let purchaseProductReqDic: NSMutableDictionary = ["product_id": ivProduct["product_id"] as Any,
                                                                                      "purchase_source": "AppleStore",
                                                                                      "country_code":  ivProduct["country_code"] as Any,
                                                                                      "purchase_app_response": receiptJSONType!]
                                    let purchaseAPI = InAppPurchaseApi(request: purchaseProductReqDic)
                                    NetworkCommon.addData(purchaseProductReqDic, eventType: PURCHASE_PRODUCT)
                                    purchaseAPI?.callNetworkRequest(purchaseProductReqDic, withSuccess: {[weak self] (requestAPI, purchaseResponseDisc) in
                                        ANLoader.hide()
                                        guard purchaseResponseDisc?.value(forKey: STATUS) as! String == STATUS_OK else {
                                            print("Error in purchase product response. api request: \(String(describing: requestAPI?.request))")
                                            return
                                        }

                                        let vsmsLimitsJsonString = purchaseResponseDisc!["vsms_limits"] as! String
                                        let vsmsInfo = ReachMeUtility.parseJSONToDictionary(inputString: vsmsLimitsJsonString)
                                        self?.availabelCreditLabel.text = "\(vsmsInfo!["limit"] as! Int32)"
                                        let newHistory: [String: Any] = ["purchase_dt": purchase.transaction.transactionDate!,
                                                                         "credits": vsmsInfo!["limit"] as! Int32,
                                                                         "pre_credits": Constants.appDelegate.confgReader.getVsmsLimit()]
                                        self?.purchaseHistory.insert(newHistory, at: 0)

                                        self?.tableView.beginUpdates()
                                        self?.tableView.insertRows(at: [IndexPath(row: 0, section: 0)], with: .top)
                                        self?.tableView.endUpdates()
                                        Constants.appDelegate.confgReader.setVsmsLimit(vsmsInfo!["limit"] as! Int32)

                                        SwiftyStoreKit.finishTransaction(purchase.transaction)//Finish Transaction

                                        }, failure: { (requestAPI, error) in
                                            ANLoader.hide()
                                            if (error! as NSError).code == 97 { //Duplicate Purchase
                                                SwiftyStoreKit.finishTransaction(purchase.transaction) //Finish Transaction
                                            }
                                            print("Error in verify purchased product: \(error.debugDescription)")
                                    })
                                }
                            case .error(let error):
                                ANLoader.hide()
                                print("Error in fetch Receipt: \(error.localizedDescription)")
                            }
                        })
                    }
                    
                    self?.alertForPurchaseResult(result)
                }
            }
            }, failure: { (requestAPI, error) in
                ANLoader.hide()
                ReachMeUtility.showAlert(withMessage: error!.localizedDescription)
        })
    }
    
    
    func alertForPurchaseResult(_ result: PurchaseResult) {
        
        switch result {
        case .success(let purchase):
            print("Purchase Success: \(purchase.productId)")
            return
            
        case .error(let error):
            ANLoader.hide()
            
            let errorMessage: String!
            print("Purchase Failed: \(error)")
            
            switch error.code {
            case .unknown:
                errorMessage = error.localizedDescription
            case .clientInvalid: // client is not allowed to issue the request, etc.
                errorMessage = "Not allowed to make the payment"
            case .paymentCancelled: // user cancelled the request, etc.
                print("User Canceld Trancsction")
                return
            case .paymentInvalid: // purchase identifier was invalid, etc.
                errorMessage = "The purchase identifier was invalid"
            case .paymentNotAllowed: // this device is not allowed to make the payment
                errorMessage = "The device is not allowed to make the payment"
            case .storeProductNotAvailable: // Product is not available in the current storefront
                errorMessage = "The product is not available in the current storefront"
            case .cloudServicePermissionDenied: // user has not allowed access to cloud service information
                errorMessage = "Access to cloud service information is not allowed"
            case .cloudServiceNetworkConnectionFailed: // the device could not connect to the nework
                errorMessage = "Could not connect to the network"
            case .cloudServiceRevoked: // user has revoked permission to use this cloud service
                errorMessage = "Cloud service was revoked"
            }
            
            ReachMeUtility.showAlert(withMessage: errorMessage, title: "Purchase failed")
        }
    }
    
    @objc func fetchPurchasedHistory() {
        guard Common.isNetworkAvailable() == NETWORK_AVAILABLE else {
            ReachMeUtility.showAlert(withMessage: "NET_NOT_AVAILABLE".localized)
            refreshSpinner.stopAnimating()
            return
        }
        
        let reqDisc: NSMutableDictionary = [:]
        let purchaseAPI = InAppPurchaseApi(request: reqDisc)
        NetworkCommon.addData(reqDisc, eventType: FETCH_PURCHASE_HISTORY)
        purchaseAPI?.callNetworkRequest(reqDisc, withSuccess: {[weak self] (requestAPI, responseDisc) in
            guard responseDisc?.value(forKey: STATUS) as! String == STATUS_OK else {
                print("Error in fetching product history. api request: \(String(describing: requestAPI?.request))")
                return
            }
            
            guard let historyList = responseDisc?.value(forKey: "purchase_list") as? [[String:Any]] else { return }
            self?.purchaseHistory = historyList
            var reloadIndexList = [IndexPath]()
            for (index, _) in historyList.enumerated() {
                reloadIndexList.append(IndexPath(row: index, section: 0))
            }
            self?.tableView.beginUpdates()
            self?.tableView.insertRows(at: reloadIndexList, with: .automatic)
            self?.tableView.endUpdates()
            self?.refreshSpinner.stopAnimating()
            
            }, failure: { (requestAPI, error) in
                self.refreshSpinner.stopAnimating()
                print("*** Error in fetching product history: \(error.debugDescription)")
        })
    }
    
    func setupInAppPurchase() {
        SwiftyStoreKit.completeTransactions(atomically: false) { purchases in
        }
    }
    
    func convertPurchaseHistoryDateToString(purchaseDate: Any) -> String {
        var date: Date!
        if purchaseDate is Int64, let utcNumber = purchaseDate as? Int64 {
            let value = Double(utcNumber) / 1000
            date = Date(timeIntervalSince1970: value)
        } else if purchaseDate is Date, let prchDate = purchaseDate as? Date {
            date = prchDate
        }
        
        let dateFormatter = DateFormatter()
        dateFormatter.locale = Locale.current
        dateFormatter.timeStyle = .medium
        dateFormatter.dateStyle = .medium
        return dateFormatter.string(from: date)
    }
    
}

//MARK: - TableView Datasource & Delegate
extension ReachMeCreditsViewController {
    override func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return "PURCHASE HISTORY"
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return purchaseHistory.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "CreditHistoryCellIdentifier", for: indexPath)
        let history = purchaseHistory[indexPath.row]
        let creditTopupValue = (history["credits"] as! Int32) - (history["pre_credits"] as! Int32)
        cell.accessoryView = {
            $0.text = "+" + "\(creditTopupValue)"
            $0.textAlignment = .center
            $0.textColor = .darkGray
            $0.font = .systemFont(ofSize: 17)
            $0.backgroundColor = .clear
            $0.sizeToFit()
            return $0
        }(UILabel())
        
        cell.textLabel?.text = "ReachMe Credits"
        cell.detailTextLabel?.text = convertPurchaseHistoryDateToString(purchaseDate: history["purchase_dt"] as Any)
        
        return cell
    }
}

// MARK: - ScrollView Delegate
extension ReachMeCreditsViewController {
    override func scrollViewDidScroll(_ scrollView: UIScrollView) {
        header.updateScrollViewOffset(scrollView)
    }
}


